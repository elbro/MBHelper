using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using BetfairAPI;
using BetfairAPI.BFExchange;
using MBHelper.Models;

namespace AutoUpdater
{
    public class RefreshPrices
    {
        public int UpdateInterval { get; set; }

        private Betfair _betfair;
        private string _uuu, _ppp;

        private Thread _autoRefresh;
        private volatile bool _threadStopped, _stopThread;
        //private readonly OddsContext dbContext = new OddsContext();

        ~RefreshPrices()
        {
            StopUpdate();
        }

        public void StartUpdate()
        {
            if (_threadStopped) return;

            _autoRefresh = null;
            _threadStopped = false;
            _stopThread = false;

            TraceMsg("Starting AutoRefresh Thread");
            _autoRefresh = new Thread(AutoRefresh) { IsBackground = true, Name = "AutoRefresh" };
            _autoRefresh.Start();
        }

        public void StopUpdate()
        {
            if (_autoRefresh == null) return;

            _stopThread = true;  // try an orderly stop
            TraceMsg("Stopping AutoRefresh Thread");
            Thread.Sleep(300);

            if (!_threadStopped)
            {
                // Orderly stop failed so abort() it 
                TraceMsg("StopAutoRefresh() AutoRefresh Thread Still Going !? Issuing Abort()");
                _autoRefresh.Abort();
                Thread.Sleep(100);
            }

            _autoRefresh = null;
        }

        // Used by thread _autoRefresh
        private void AutoRefresh()
        {
            _betfair = new Betfair();
            _betfair.MessageRedirect(Message);

            _uuu = "***REMOVED***";
            _ppp = "***REMOVED***";

            if (!_betfair.Login(_uuu, _ppp))
            {
                Message("AutoRefresh() Error: Betfair Login Failed");
                _threadStopped = true;

                return;
            }

            // Main Thread Loop
            while (!_stopThread)
            {
                var bookie = new WilliamHill(_betfair);
                bookie.GetSoccerMatchOdds();               
            }

        }

        #region Message Delegates
        // Delegate functions for message processing
        private UserMsgDelegate Message;

        private void TraceMsg(string msg)
        {
            Debug.WriteLine(string.Format("{0}$ TRACEMSG: MarketData: {1}", DateTime.Now, msg));
        }

        public void TraceMsg(string format, params object[] objs)
        {
            Debug.WriteLine(string.Format(format, objs));
        }

        public void MessageRedirect(UserMsgDelegate msgHandler)
        {
            Message = msgHandler;
        }
        #endregion
    }
}
